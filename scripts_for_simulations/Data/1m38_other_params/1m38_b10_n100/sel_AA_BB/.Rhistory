mutate(position1 = 1:nrow(BuBR1_APC_all_pairs)) %>%
gather(key = position2, value = MMI_corr, -position1) %>%
mutate(position2 = gsub(x = position2, pattern = 'V', replacement = ''))
# Reformat the second column as an integer and save as a tibble
BuBR1_APC_all_pairs$position2 <- as.integer(BuBR1_APC_all_pairs$position2)
# Just to prove symmetry
BuBR1_APC_all_pairs %>% filter(position1 %in% c(50, 1043), position2 %in% c(50, 1043))
# To avoid repetition, I will only keep positions where position 1 is before position 2
BuBR1_APC_all_pairs %<>% filter(position1 < position2) %>%
arrange(desc(MMI_corr))
BuBR1_APC_all_pairs %<>% mutate(rank = 1:nrow(BuBR1_APC_all_pairs))
# Add the info on the domains for both positions
BuBR1_APC_all_pairs %<>% mutate(domain1 = ifelse(position1 %in% domains_human$Dbox, 'Dbox',
ifelse(position1 %in% domains_human$KARD, 'KARD',
ifelse(position1 %in% domains_human$KEN1, 'KEN1',
ifelse(position1 %in% domains_human$KEN2, 'KEN2',
ifelse(position1 %in% domains_human$TPR, 'TPR',
ifelse(position1 %in% domains_human$kinase, 'kinase',
ifelse(position1 %in% domains_human$GLEBS2, 'GLEBS2',
ifelse(position1 %in% domains_human$ABBA1, 'ABBA1',
ifelse(position1 %in% domains_human$ABBA_other, 'ABBA_other',
ifelse(position1 %in% domains_human$ABBA2, 'ABBA2',
ifelse(position1 %in% domains_human$CDII, 'CDII',
'other'))))))))))))
BuBR1_APC_all_pairs %<>% mutate(domain2 = ifelse(position2 %in% domains_human$Dbox, 'Dbox',
ifelse(position2 %in% domains_human$KARD, 'KARD',
ifelse(position2 %in% domains_human$KEN1, 'KEN1',
ifelse(position2 %in% domains_human$KEN2, 'KEN2',
ifelse(position2 %in% domains_human$TPR, 'TPR',
ifelse(position2 %in% domains_human$kinase, 'kinase',
ifelse(position2 %in% domains_human$GLEBS2, 'GLEBS2',
ifelse(position2 %in% domains_human$ABBA1, 'ABBA1',
ifelse(position2 %in% domains_human$ABBA_other, 'ABBA_other',
ifelse(position2 %in% domains_human$ABBA2, 'ABBA2',
ifelse(position2 %in% domains_human$CDII, 'CDII',
'other'))))))))))))
# Extract the top 5000 coevolving pairs (would be the top 1%)
top5000 <- BuBR1_APC_all_pairs %>% filter(rank <= 5000)
# Some formatting to make the final table symmetric
names_columns <- colnames(top5000)
top5000.2 <- top5000 %>% filter(domain1 != domain2)
top5000.2 <- top5000.2[,c(2,1,3,4,6,5)]
colnames(top5000.2) <- names_columns
top5000_final_BuBR1 <- rbind(top5000, top5000.2)
# The symmetric table
table(top5000_final_BuBR1$domain1, top5000_final_BuBR1$domain2)
# The non-symmetric table
table(top5000$domain1, top5000$domain2)
top5000_final_BuBR1 %>% filter(domain1 == 'KARD', domain2 == 'kinase') %>% arrange(rank)
## Positions for the domains of the human BUB1 sequence (ENSP00000302530)
domains_human_BUB1 <- list()
domains_human_BUB1$TPR <- c(9:148)
domains_human_BUB1$GLEBS2 <- c(232:265)
domains_human_BUB1$CMI <- c(455:481)
domains_human_BUB1$ABBA_other <- c(534:541, 624:631)
domains_human_BUB1$KARD <- c(650:671)
domains_human_BUB1$CDII <- c(739:772)
domains_human_BUB1$kinase <- c(790:1051)
# Run the function to get the plots
domain_mean_mut_info_corr_MDAT_BUB1 <- evol_heatmap(mut_info_corr_MDAT_BUB1, 'Mean MIp', domains_human_BUB1, 'BUB1')
# 10.Get the plot for MMI with APC for BUB1
domain_mean_mut_info_corr_MDAT_BUB1$data
mut_info_corr_MDAT_BUB1 <- as.matrix(read.table('BUB1_common_seqs_APC_2019_04_03.txt', h = F))
## Positions for the domains of the human BUB1 sequence (ENSP00000302530)
domains_human_BUB1 <- list()
domains_human_BUB1$TPR <- c(9:148)
domains_human_BUB1$GLEBS2 <- c(232:265)
domains_human_BUB1$CMI <- c(455:481)
domains_human_BUB1$ABBA_other <- c(534:541, 624:631)
domains_human_BUB1$KARD <- c(650:671)
domains_human_BUB1$CDII <- c(739:772)
domains_human_BUB1$kinase <- c(790:1051)
# Run the function to get the plots
domain_mean_mut_info_corr_MDAT_BUB1 <- evol_heatmap(mut_info_corr_MDAT_BUB1, 'Mean MIp', domains_human_BUB1, 'BUB1')
# 10.Get the plot for MMI with APC for BUB1
domain_mean_mut_info_corr_MDAT_BUB1$data
domain_mean_mut_info_corr_MDAT_BUB1$plot
BUB1_APC_all_pairs <- as.data.frame(mut_info_corr_MDAT_BUB1)
BUB1_APC_all_pairs %<>%
mutate(position1 = 1:nrow(BUB1_APC_all_pairs)) %>%
gather(key = position2, value = MMI_corr, -position1) %>%
mutate(position2 = gsub(x = position2, pattern = 'V', replacement = ''))
# Reformat the second column as an integer and save as a tibble
BUB1_APC_all_pairs$position2 <- as.integer(BUB1_APC_all_pairs$position2)
# Just to prove symmetry
BUB1_APC_all_pairs %>% filter(position1 %in% c(50, 1043), position2 %in% c(50, 1043))
# To avoid repetition, I will only keep positions where position 1 is before position 2
BUB1_APC_all_pairs %<>% filter(position1 < position2) %>%
arrange(desc(MMI_corr))
BUB1_APC_all_pairs %<>% mutate(rank = 1:nrow(BUB1_APC_all_pairs))
# Add the info on the domains for both positions
BUB1_APC_all_pairs %<>% mutate(domain1 = ifelse(position1 %in% domains_human_BUB1$KARD, 'KARD',
ifelse(position1 %in% domains_human_BUB1$TPR, 'TPR',
ifelse(position1 %in% domains_human_BUB1$kinase, 'kinase',
ifelse(position1 %in% domains_human_BUB1$GLEBS2, 'GLEBS2',
ifelse(position1 %in% domains_human_BUB1$ABBA_other, 'ABBA_other',
ifelse(position1 %in% domains_human_BUB1$CMI, 'CMI',
ifelse(position1 %in% domains_human_BUB1$CDII, 'CDII',
'other'))))))))
BUB1_APC_all_pairs %<>% mutate(domain2 = ifelse(position2 %in% domains_human_BUB1$KARD, 'KARD',
ifelse(position2 %in% domains_human_BUB1$TPR, 'TPR',
ifelse(position2 %in% domains_human_BUB1$kinase, 'kinase',
ifelse(position2 %in% domains_human_BUB1$GLEBS2, 'GLEBS2',
ifelse(position2 %in% domains_human_BUB1$ABBA_other, 'ABBA_other',
ifelse(position2 %in% domains_human_BUB1$CMI, 'CMI',
ifelse(position2 %in% domains_human_BUB1$CDII, 'CDII',
'other'))))))))
# Extract the top 5000 coevolving pairs (would be the top 1%)
top5000 <- BUB1_APC_all_pairs %>% filter(rank <= 5000)
# Some formatting to make the final table symmetric
names_columns <- colnames(top5000)
top5000.2 <- top5000 %>% filter(domain1 != domain2)
top5000.2 <- top5000.2[,c(2,1,3,4,6,5)]
colnames(top5000.2) <- names_columns
top5000_final_BUB1 <- rbind(top5000, top5000.2)
# The symmetric table
table(top5000_final_BUB1$domain1, top5000_final_BUB1$domain2)
# The non-symmetric table
table(top5000$domain1, top5000$domain2)
top5000_final_BUB1 %>% filter(domain1 == 'KARD', domain2 == 'kinase') %>% arrange(rank)
# Load everything for BuBR1
entropy_MDAT_BuBR1 <- read.table('BuBR1_common_seqs_entropy_2019_04_03.txt', h = F)
entropy_MDAT_BuBR1$position <- 1:length(entropy_MDAT_BuBR1$V1)
colnames(entropy_MDAT_BuBR1)[1] <- 'entropy'
sorted_entropy_MDAT_BuBR1 <- entropy_MDAT_BuBR1[order(entropy_MDAT_BuBR1$entropy, decreasing = TRUE),]
sorted_entropy_MDAT_BuBR1$domain <- ifelse(sorted_entropy_MDAT_BuBR1$position %in% domains_human$Dbox, 'Dbox',
ifelse(sorted_entropy_MDAT_BuBR1$position %in% domains_human$KARD, 'KARD',
ifelse(sorted_entropy_MDAT_BuBR1$position %in% domains_human$KEN1, 'KEN1',
ifelse(sorted_entropy_MDAT_BuBR1$position %in% domains_human$KEN2, 'KEN2',
ifelse(sorted_entropy_MDAT_BuBR1$position %in% domains_human$TPR, 'TPR',
ifelse(sorted_entropy_MDAT_BuBR1$position %in% domains_human$kinase, 'kinase',
ifelse(sorted_entropy_MDAT_BuBR1$position %in% domains_human$GLEBS2, 'GLEBS2',
ifelse(sorted_entropy_MDAT_BuBR1$position %in% domains_human$ABBA1, 'ABBA1',
ifelse(sorted_entropy_MDAT_BuBR1$position %in% domains_human$ABBA_other, 'ABBA_other',
ifelse(sorted_entropy_MDAT_BuBR1$position %in% domains_human$ABBA2, 'ABBA2',
ifelse(sorted_entropy_MDAT_BuBR1$position %in% domains_human$CDII, 'CDII',
'other')))))))))))
sorted_entropy_MDAT_BuBR1$rank <- 1:length(entropy_MDAT_BuBR1$entropy)
sorted_entropy_MDAT_BuBR1$protein <- 'BuBR1'
# Load everything for BUB1
entropy_MDAT_BUB1 <- read.table('BUB1_common_seqs_entropy_2019_04_03.txt', h = F)
entropy_MDAT_BUB1$position <- 1:length(entropy_MDAT_BUB1$V1)
colnames(entropy_MDAT_BUB1)[1] <- 'entropy'
sorted_entropy_MDAT_BUB1 <- entropy_MDAT_BUB1[order(entropy_MDAT_BUB1$entropy, decreasing = TRUE),]
sorted_entropy_MDAT_BUB1$domain <- ifelse(sorted_entropy_MDAT_BUB1$position %in% domains_human_BUB1$KARD, 'KARD',
ifelse(sorted_entropy_MDAT_BUB1$position %in% domains_human_BUB1$TPR, 'TPR',
ifelse(sorted_entropy_MDAT_BUB1$position %in% domains_human_BUB1$kinase, 'kinase',
ifelse(sorted_entropy_MDAT_BUB1$position %in% domains_human_BUB1$GLEBS2, 'GLEBS2',
ifelse(sorted_entropy_MDAT_BUB1$position %in% domains_human_BUB1$ABBA_other, 'ABBA_other',
ifelse(sorted_entropy_MDAT_BUB1$position %in% domains_human_BUB1$CMI, 'CMI',
ifelse(sorted_entropy_MDAT_BUB1$position %in% domains_human_BUB1$CDII, 'CDII',
'other')))))))
sorted_entropy_MDAT_BUB1$rank <- 1:length(entropy_MDAT_BUB1$entropy)
sorted_entropy_MDAT_BUB1$protein <- 'BUB1'
# Put the two datasets together and plot the distributions of entropies side by side
all_entropies <- rbind(sorted_entropy_MDAT_BUB1, sorted_entropy_MDAT_BuBR1)
plot_entropies <- all_entropies %>%
complete(domain, protein, fill = list(entropy = 0, position = 0, rank = 0)) %>%
ggplot(aes(x = factor(domain, levels = c('ABBA1', 'ABBA2', 'Dbox', 'KEN1', 'KEN2', 'ABBA_other', 'CDII', 'GLEBS2', 'KARD', 'kinase', 'TPR', 'CMI', 'other')),
y = entropy, fill = protein)) +
geom_point(aes(colour = protein), alpha = 0.8,
position = position_jitterdodge(jitter.width = 0.25)) +
scale_colour_manual(values = c('#3399ff', '#ff4d4d'), guide = 'none') +
# geom_jitter(width = 0.25, ) +
geom_boxplot(outlier.shape = NA, alpha = 0.5) +
scale_fill_manual(values = c('#3399ff', '#ff4d4d')) +
xlab('Domain') + ylab('Entropy') +
theme(plot.title = element_text(hjust = 0.5, face = 'bold'),
panel.background = element_rect(fill = "white"),
axis.title.x = element_text(face = 'bold'), axis.title.y = element_text(face = 'bold'),
axis.text.x = element_text(angle = 90, size = 10, hjust = 1, vjust = 0.5),
axis.line = element_line()) +
labs(fill = '') +
annotate("text", label = 'BuBR1 only', x = 3, y = 2, size = 3, colour = 'black', fontface = 'bold') +
annotate("text", label = 'Common domains', x = 8.5, y = 2, size = 3, colour = 'black', fontface = 'bold') +
annotate("text", label = 'BUB1 only', x = 12, y = 2, size = 3, colour = 'black', fontface = 'bold')
plot_entropies
plot_entropies2 <- all_entropies %>%
complete(domain, protein, fill = list(entropy = 0, position = 0, rank = 0)) %>%
filter(domain %in% c('ABBA_other', 'CDII', 'GLEBS2', 'KARD', 'kinase', 'TPR', 'other')) %>%
ggplot(aes(x = factor(domain, levels = c('ABBA_other', 'CDII', 'GLEBS2', 'KARD', 'kinase', 'TPR', 'other')),
y = entropy, fill = protein)) +
geom_point(aes(colour = protein), alpha = 0.8,
position = position_jitterdodge(jitter.width = 0.25)) +
scale_colour_manual(values = c('#3399ff', '#ff4d4d'), guide = 'none') +
# geom_jitter(width = 0.25, ) +
geom_boxplot(outlier.shape = NA, alpha = 0.5) +
scale_fill_manual(values = c('#3399ff', '#ff4d4d')) +
xlab('Domain') + ylab('Entropy') +
theme(plot.title = element_text(hjust = 0.5, face = 'bold'),
panel.background = element_rect(fill = "white"),
axis.title.x = element_text(face = 'bold'), axis.title.y = element_text(face = 'bold'),
axis.text.x = element_text(angle = 90, size = 10, hjust = 1, vjust = 0.5),
axis.line = element_line()) +
labs(fill = '')
plot_entropies2
all_entropies %>% filter(protein == 'BUB1', position %in% c(655, 661, 665, 796, 801, 821, 830, 917, 919, 922, 946))
all_entropies %>% filter(protein == 'BuBR1', position %in% c(620, 670, 676, 680, 777, 795, 804, 882, 884, 887, 911))
# List of top pairs
kard_kinase_bub1 <- top5000_final_BUB1 %>% filter(domain1 == 'KARD', domain2 == 'kinase') %>% arrange(rank)
kard_kinase_bubr1 <- top5000_final_BuBR1 %>% filter(domain1 == 'KARD', domain2 == 'kinase') %>% arrange(rank)
## BuBR1 ##
# Extract the top 5000 coevolving pairs (would be the top 1%)
top25000 <- BuBR1_APC_all_pairs %>% filter(rank <= 25000)
# Some formatting to make the final table symmetric
names_columns <- colnames(top25000)
top25000.2 <- top25000 %>% filter(domain1 != domain2)
top25000.2 <- top25000.2[,c(2,1,3,4,6,5)]
colnames(top25000.2) <- names_columns
top25000_final_BuBR1 <- rbind(top25000, top25000.2)
# The symmetric table
BuBR1_top25000_table <- table(top25000_final_BuBR1$domain1, top25000_final_BuBR1$domain2)
# Do the clustering
row_order <- hclust(dist(BuBR1_top25000_table))$order
col_order <- hclust(dist(t(BuBR1_top25000_table)))$order
new_data <- BuBR1_top25000_table[row_order, col_order]
new_tidy <- melt(new_data)
# To ensure that we get the same order, we have to factor the variables
new_tidy$Var1 <- factor(new_tidy$Var1, levels = unique(new_tidy$Var1))
new_tidy$Var2 <- factor(new_tidy$Var2, levels = unique(new_tidy$Var2))
BuBR1_top25000_table <- new_tidy
colnames(BuBR1_top25000_table) <- c('Domain_1', 'Domain_2', 'Freq')
# Totals for domain 2
totals <- BuBR1_top25000_table %>% group_by(Domain_2) %>%
summarise(totals = sum(Freq))
BuBR1_top25000_percentages <- inner_join(x = BuBR1_top25000_table, y = totals,
by = c("Domain_2" = "Domain_2")) %>%
mutate(percentages = round(Freq *100/ totals, 2))
p <- BuBR1_top25000_percentages %>%
filter(Domain_1 != 'other', Domain_2 != 'other') %>%
ggplot(aes(x = Domain_1, y = Domain_2)) +
geom_tile(aes(fill = percentages), colour = 'black', size = 1.1) +
# scale_fill_gradient2(low = 'red', midpoint = 0,
#                      mid = 'white', high = 'purple'
#                      ) +
geom_text(aes(label = percentages)) +
scale_fill_gradient2(name = 'High-scoring pairs') +
xlab('Domain 1') + ylab('Domain 2') +
ggtitle('BuBR1') +
theme(plot.title = element_text(hjust = 0.5, face = 'bold'),
panel.background = element_rect(fill = "white"),
axis.title.x = element_text(face = 'bold'), axis.title.y = element_text(face = 'bold'),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
axis.line = element_blank(),
axis.text.x = element_text(angle = 90, size = 10, hjust = 1),
axis.text.y = element_text(size = 10)
)
p
## BUB1 ##
# Extract the top 5000 coevolving pairs (would be the top 1%)
top25000 <- BUB1_APC_all_pairs %>% filter(rank <= 25000)
# Some formatting to make the final table symmetric
names_columns <- colnames(top25000)
top25000.2 <- top25000 %>% filter(domain1 != domain2)
top25000.2 <- top25000.2[,c(2,1,3,4,6,5)]
colnames(top25000.2) <- names_columns
top25000_final_BUB1 <- rbind(top25000, top25000.2)
# The symmetric table
table(top25000_final_BUB1$domain1, top25000_final_BUB1$domain2)
BuBR1_top25000_table
# The symmetric table
BUB1_top25000_table <- table(top25000_final_BUB1$domain1, top25000_final_BUB1$domain2)
# Change name
# Do the clustering
row_order <- hclust(dist(BUB1_top25000_table))$order
col_order <- hclust(dist(t(BUB1_top25000_table)))$order
new_data <- BUB1_top25000_table[row_order, col_order]
new_tidy <- melt(new_data)
# To ensure that we get the same order, we have to factor the variables
new_tidy$Var1 <- factor(new_tidy$Var1, levels = unique(new_tidy$Var1))
new_tidy$Var2 <- factor(new_tidy$Var2, levels = unique(new_tidy$Var2))
BUB1_top25000_table <- new_tidy
colnames(BUB1_top25000_table) <- c('Domain_1', 'Domain_2', 'Freq')
# Totals for domain 2
totals <- BUB1_top25000_table %>% group_by(Domain_2) %>%
summarise(totals = sum(Freq))
BUB1_top25000_percentages <- inner_join(x = BUB1_top25000_table, y = totals,
by = c("Domain_2" = "Domain_2")) %>%
mutate(percentages = round(Freq *100/ totals, 2))
p <- BUB1_top25000_percentages %>%
filter(Domain_1 != 'other', Domain_2 != 'other') %>%
ggplot(aes(x = Domain_1, y = Domain_2)) +
geom_tile(aes(fill = percentages), colour = 'black', size = 1.1) +
# scale_fill_gradient2(low = 'red', midpoint = 0,
#                      mid = 'white', high = 'purple'
#                      ) +
geom_text(aes(label = percentages)) +
scale_fill_gradient2(name = 'High-scoring pairs') +
xlab('Domain 1') + ylab('Domain 2') +
ggtitle('BUB1') +
theme(plot.title = element_text(hjust = 0.5, face = 'bold'),
panel.background = element_rect(fill = "white"),
axis.title.x = element_text(face = 'bold'), axis.title.y = element_text(face = 'bold'),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
axis.line = element_blank(),
axis.text.x = element_text(angle = 90, size = 10, hjust = 1),
axis.text.y = element_text(size = 10)
)
p
ggsave(plot = p, filename = '~/Dropbox/BuBR1/Figures/Figures_2019-05-01/13.BuBR1_percentage_high_scoring_pairs.png',
device = 'png', height = 7, width = 7, dpi = 500)
p <- BuBR1_top25000_percentages %>%
filter(Domain_1 != 'other', Domain_2 != 'other') %>%
ggplot(aes(x = Domain_1, y = Domain_2)) +
geom_tile(aes(fill = percentages), colour = 'black', size = 1.1) +
# scale_fill_gradient2(low = 'red', midpoint = 0,
#                      mid = 'white', high = 'purple'
#                      ) +
geom_text(aes(label = percentages)) +
scale_fill_gradient2(name = 'High-scoring pairs') +
xlab('Domain 1') + ylab('Domain 2') +
ggtitle('BuBR1') +
theme(plot.title = element_text(hjust = 0.5, face = 'bold'),
panel.background = element_rect(fill = "white"),
axis.title.x = element_text(face = 'bold'), axis.title.y = element_text(face = 'bold'),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
axis.line = element_blank(),
axis.text.x = element_text(angle = 90, size = 10, hjust = 1),
axis.text.y = element_text(size = 10)
)
p
ggsave(plot = p, filename = '~/Dropbox/BuBR1/Figures/Figures_2019-05-01/13.BuBR1_percentage_high_scoring_pairs.png',
device = 'png', height = 7, width = 7, dpi = 500)
ggsave(plot = p, filename = '~/Dropbox/BuBR1/Figures/Figures_2019-05-01/13.BuBR1_percentage_high_scoring_pairs.png',
device = 'png', height = 7, width = 10, dpi = 500)
p <- BUB1_top25000_percentages %>%
filter(Domain_1 != 'other', Domain_2 != 'other') %>%
ggplot(aes(x = Domain_1, y = Domain_2)) +
geom_tile(aes(fill = percentages), colour = 'black', size = 1.1) +
# scale_fill_gradient2(low = 'red', midpoint = 0,
#                      mid = 'white', high = 'purple'
#                      ) +
geom_text(aes(label = percentages)) +
scale_fill_gradient2(name = 'High-scoring pairs') +
xlab('Domain 1') + ylab('Domain 2') +
ggtitle('BUB1') +
theme(plot.title = element_text(hjust = 0.5, face = 'bold'),
panel.background = element_rect(fill = "white"),
axis.title.x = element_text(face = 'bold'), axis.title.y = element_text(face = 'bold'),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
axis.line = element_blank(),
axis.text.x = element_text(angle = 90, size = 10, hjust = 1),
axis.text.y = element_text(size = 10)
)
p
ggsave(plot = p, filename = '~/Dropbox/BuBR1/Figures/Figures_2019-05-01/14.BUB1_percentage_high_scoring_pairs.png',
device = 'png', height = 7, width = 10, dpi = 500)
View(BUB1_top25000_table)
View(BUB1_top25000_percentages)
# 1A82 #
nosel_1A82 <- read.table('~/Dropbox/draftAM1.0/Figure_polishing/Data/1.Simulations/1a82/nosel_50rep/nosel_1A82_N1000_all_energies_50rep.txt',
h = T, sep = '\t') %>% mutate(ComplexType = gsub(pattern = 'Homodimer_A', replacement = 'Homodimer AA', x = ComplexType),
ComplexType = gsub(pattern = 'Homodimer_B', replacement = 'Homodimer BB', x = ComplexType),
ComplexType = gsub(pattern = 'Heterodimers', replacement = 'Heterodimer AB', x = ComplexType))
nosel_1A82 <- read.table('~/Documents/Hiver2019/Dropbox_backup/1.Simulations/1a82/nosel_50rep/nosel_1A82_N1000_all_energies_50rep.txt',
h = T, sep = '\t') %>% mutate(ComplexType = gsub(pattern = 'Homodimer_A', replacement = 'Homodimer AA', x = ComplexType),
ComplexType = gsub(pattern = 'Homodimer_B', replacement = 'Homodimer BB', x = ComplexType),
ComplexType = gsub(pattern = 'Heterodimers', replacement = 'Heterodimer AB', x = ComplexType))
View(nosel_1A82)
# 1M38, beta = 10, N = 100 #
sel_AA_BB_b10_n100 <- read.table('/home/axelle/Documents/Hiver2019/Paralog_interference/Simulations_May/1m38_b10_n100/sel_AA_BB/all_deltaGs_heterodimer_all_reps.tab',
h = T, sep = '\t')
View(sel_AA_BB_b10_n100)
# A function that will receive the six tables of fixed and proposed mutations to condense them
condensed_energies <- function(folder, num_reps, num_subs, scenario, beta, N){
setwd(folder)
outlist <- list()
# Load the fixed mutations
het_fixed <- read.table('all_deltaGs_heterodimer_all_reps.tab', h = T, sep = '\t') %>%
mutate(Replicate = rep(1:num_reps, each = nrow(het_fixed/(num_subs + 1)),
Substitution = rep(0:num_subs, nrow(het_fixed/num_reps)),
ComplexType = 'Heterodimer AB',
Scenario = scenario,
Beta = beta,
N = N))
homo_AA_fixed <- read.table('all_deltaGs_homodimer_A_all_reps.tab', h = T, sep = '\t') %>%
mutate(Replicate = rep(1:num_reps, each = nrow(het_fixed/(num_subs + 1)),
Substitution = rep(0:num_subs, nrow(het_fixed/num_reps)),
ComplexType = 'Homodimer_AA',
Scenario = scenario,
Beta = beta,
N = N))
homo_BB_fixed <- read.table('all_deltaGs_homodimer_B_all_reps.tab', h = T, sep = '\t') %>%
mutate(Replicate = rep(1:num_reps, each = nrow(het_fixed/(num_subs + 1)),
Substitution = rep(0:num_subs, nrow(het_fixed/num_reps)),
ComplexType = 'Homodimer_BB',
Scenario = scenario,
Beta = beta,
N = N))
outlist$all_energies <- rbind(het_fixed, homo_AA_fixed, homo_BB_fixed)
# Load the proposed mutations
# Load the fixed mutations
het_proposed <- read.table('all_deltaGs_proposed_heterodimer_all_reps.tab', h = T, sep = '\t') %>%
mutate(Replicate = rep(1:num_reps, each = nrow(het_fixed/(num_subs + 1)),
Substitution = rep(0:num_subs, nrow(het_fixed/num_reps)),
ComplexType = 'Heterodimer AB',
Scenario = scenario,
Beta = beta,
N = N))
homo_AA_proposed <- read.table('all_deltaGs_proposed_homodimer_A_all_reps.tab', h = T, sep = '\t') %>%
mutate(Replicate = rep(1:num_reps, each = nrow(het_fixed/(num_subs + 1)),
Substitution = rep(0:num_subs, nrow(het_fixed/num_reps)),
ComplexType = 'Homodimer_AA',
Scenario = scenario,
Beta = beta,
N = N))
homo_BB_proposed <- read.table('all_deltaGs_proposed_homodimer_B_all_reps.tab', h = T, sep = '\t') %>%
mutate(Replicate = rep(1:num_reps, each = nrow(het_fixed/(num_subs + 1)),
Substitution = rep(0:num_subs, nrow(het_fixed/num_reps)),
ComplexType = 'Homodimer_BB',
Scenario = scenario,
Beta = beta,
N = N))
outlist$all_proposed_energies <- rbind(het_proposed, homo_AA_proposed, homo_BB_proposed)
return(outlist)
}
# 1M38, beta = 10, N = 100 #
sel_AA_BB_b10_n100 <- condensed_energies('/home/axelle/Documents/Hiver2019/Paralog_interference/Simulations_May/1m38_b10_n100/sel_AA_BB/',
50, 200, 'Selection on both homodimers', 10, 100)
setwd('/home/axelle/Documents/Hiver2019/Paralog_interference/Simulations_May/1m38_b10_n100/sel_AA_BB/')
het_fixed <- read.table('all_deltaGs_heterodimer_all_reps.tab', h = T, sep = '\t') %>%
mutate(Replicate = rep(1:50, each = (nrow(het_fixed)/200) + 1),
Substitution = rep(0:200, nrow(het_fixed/50)),
ComplexType = 'Heterodimer AB',
Scenario = 'Selection on both homodimers',
Beta = 10,
N = 100))
het_fixed <- read.table('all_deltaGs_heterodimer_all_reps.tab', h = T, sep = '\t') %>%
mutate(Replicate = rep(1:50, each = (nrow(het_fixed)/200) + 1),
Substitution = rep(0:200, nrow(het_fixed/)50),
ComplexType = 'Heterodimer AB',
Scenario = 'Selection on both homodimers',
Beta = 10,
N = 100)
het_fixed <- read.table('all_deltaGs_heterodimer_all_reps.tab', h = T, sep = '\t') %>%
mutate(Replicate = rep(1:50, each = (nrow(het_fixed)/200) + 1),
Substitution = rep(0:200, nrow(het_fixed)/50),
ComplexType = 'Heterodimer AB',
Scenario = 'Selection on both homodimers',
Beta = 10,
N = 100)
# A function that will receive the six tables of fixed and proposed mutations to condense them
condensed_energies <- function(folder, num_reps, num_subs, scenario, beta, N){
}
# A function that will receive the six tables of fixed and proposed mutations to condense them
condensed_energies <- function(folder, num_reps, num_subs, scenario, beta, N){
}
8 + 8
# A function that will receive the six tables of fixed and proposed mutations to condense them
condensed_energies <- function(folder, num_reps, num_subs, scenario, beta, N){
setwd(folder)
outlist <- list()
# Load the fixed mutations
het_fixed <- read.table('all_deltaGs_heterodimer_all_reps.tab', h = T, sep = '\t')
het_fixed %<>%
mutate(Replicate = rep(1:num_reps, each = (nrow(het_fixed)/num_subs) + 1),
Substitution = rep(0:num_subs, nrow(het_fixed)/num_reps),
ComplexType = 'Heterodimer AB',
Scenario = scenario,
Beta = beta,
N = N)
homo_AA_fixed <- read.table('all_deltaGs_homodimer_A_all_reps.tab', h = T, sep = '\t')
homo_AA_fixed %<>%
mutate(Replicate = rep(1:num_reps, each = (nrow(homo_AA_fixed)/(num_subs) + 1),
Substitution = rep(0:num_subs, nrow(homo_AA_fixed)/num_reps),
ComplexType = 'Homodimer_AA',
Scenario = scenario,
Beta = beta,
N = N)
homo_BB_fixed <- read.table('all_deltaGs_homodimer_B_all_reps.tab', h = T, sep = '\t')
homo_BB_fixed %<>%
mutate(Replicate = rep(1:num_reps, each = (nrow(homo_BB_fixed)/num_subs) + 1),
Substitution = rep(0:num_subs, nrow(homo_BB_fixed)/num_reps),
ComplexType = 'Homodimer_BB',
Scenario = scenario,
Beta = beta,
N = N)
outlist$all_energies <- rbind(het_fixed, homo_AA_fixed, homo_BB_fixed)
# Load the proposed mutations
het_proposed <- read.table('all_deltaGs_proposed_heterodimer_all_reps.tab', h = T, sep = '\t')
het_proposed %<>%
mutate(Replicate = rep(1:num_reps, each = (nrow(het_proposed)/num_subs) + 1),
Substitution = rep(0:num_subs, nrow(het_proposed)/num_reps),
ComplexType = 'Heterodimer AB',
Scenario = scenario,
Beta = beta,
N = N)
homo_AA_proposed <- read.table('all_deltaGs_proposed_homodimer_A_all_reps.tab', h = T, sep = '\t')
homo_AA_proposed %<>%
mutate(Replicate = rep(1:num_reps, each = (nrow(homo_AA_proposed)/num_subs) + 1),
Substitution = rep(0:num_subs, nrow(homo_AA_proposed)/num_reps),
ComplexType = 'Homodimer_AA',
Scenario = scenario,
Beta = beta,
N = N)
homo_BB_proposed <- read.table('all_deltaGs_proposed_homodimer_B_all_reps.tab', h = T, sep = '\t')
homo_BB_proposed %<>%
mutate(Replicate = rep(1:num_reps, each = (nrow(homo_BB_proposed)/num_subs) + 1),
Substitution = rep(0:num_subs, nrow(homo_BB_proposed)/num_reps),
ComplexType = 'Homodimer_BB',
Scenario = scenario,
Beta = beta,
N = N)
outlist$all_proposed_energies <- rbind(het_proposed, homo_AA_proposed, homo_BB_proposed)
return(outlist)
}
#### Load tables ####
# 1M38, beta = 10, N = 100 #
sel_AA_BB_b10_n100 <- condensed_energies('/home/axelle/Documents/Hiver2019/Paralog_interference/Simulations_May/1m38_b10_n100/sel_AA_BB/',
50, 200, 'Selection on both homodimers', 10, 100)
read.table('/home/axelle/Documents/Hiver2019/Paralog_interference/Simulations_May/1m38_b10_n100/sel_AA_BB/all_deltaGs_heterodimer_all_reps.tab',
h = T, sep = '\t')
